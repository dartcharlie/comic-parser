var fs = require("fs");
var http = require("http");
var https = require("https");
var path = require("path");
var url = require("url");
var events = require("events").EventEmitter;
var util = require("util");
var cheerio = require("cheerio");
// The "Image" class.
function Image(image, address) {

	var at = this.attributes = image.attribs;
	this.name = path.basename(at.src, path.extname(at.src));
	this.saveTo = path.dirname(require.main.filename) + "/";
	this.extension = path.extname(at.src);
	this.address = url.resolve(address, at.src);
	this.fromAddress = address;
}

function Scraper(addressArray) {

	events.call(this);
	this.addressArray = addressArray;
};

// Inherit the methods of "events".
util.inherits(Scraper, events);

Scraper.prototype.download = function() {

	var urlArray = this.addressArray;
	
	//return response is a dictionary with key being file name and value is dictionary{error,response,body}
	/*
	var callback = function(responses){
		//ref = this;
		var keys = [];
		for(var key in responses){
			if(responses.hasOwnProperty(key)){
				var response = responses[key];
				
			}
		}
	}
	*/
	multiple_request(urlArray,null);
	
	/*
	var request = protocol.request(options, function(response) {

		if (response.statusCode != 200) {
			console.error("Image scraper(3): image couldn't be found.");
		} else {
			var imageFile = fs.createWriteStream(path.normalize("./" + "1" + ".jpg"));
			imageFile.on("error", function(e) {

				console.error("Image scraper(4): error while loading image: " + e + ".");
			});
			response.on("data", function(data) {

				imageFile.write(data);
			});
			response.on("end", function() {

				imageFile.end();
				if (typeof (callback) == "function")
					callback.call(ref);
			});
		}
	});
	request.end();
	request.on("error", function(e) {

		console.error("Image scraper(2): error while loading web page: " + e + ".");
	});
	*/
};

/**
 * Handle multiple requests at once
 * @param urls [array]
 * @param callback [function]
 * @requires request module for node ( https://github.com/mikeal/request )
 */
var multiple_request = function(urls, callback) {

	'use strict';
	var results = {}, t = urls.length, count = 0, handler = function(response) {

		var pathString = response.req.path;
		var fileName = parseFileName(pathString);
		var folderName = parseFolderName(fileName);
		console.log("fileName: " + fileName);
		if (response.statusCode != 200) {
			console.error("Image scraper(3): image couldn't be found.");
		} else {
			var imageFile = fs.createWriteStream(path.normalize("./comics/" + folderName + fileName));
			imageFile.on("error", function(e) {

				console.error("Image scraper(4): error while loading image: " + e + ".");
			});
			response.on("data", function(data) {

				imageFile.write(data);
			});
			response.on("end", function() {

				imageFile.end();
				
			});
		}
		
		if (++count === urls.length) {
			//callback(results);
		}

	};

	// process the url array and send requests asynch
	while (t--) {
		var parsedUrl = url.parse(urls[t]);
		console.log("href: " + parsedUrl.href);

		// Support HTTPS.
		if (parsedUrl.protocol == "https:")
			var protocol = https;
		else
			var protocol = http;
		var options = {
			hostname : parsedUrl.hostname,
			path : parsedUrl.path,
			headers : {
				'Referer' : 'http://cnc.dm5.com/m11420-p41/',
			},
		};
		var request = protocol.request(options, handler);
		request.end();
		request.on("error", function(e) {

			console.error("Image scraper(2): error while loading web page: " + e + ".");
		});
	}
};

function parseFileName(path){
	//custom logic to parse dragon ball request url
	var parts = path.split('/')
	return parts[parts.length-1].split('?')[0]
};

function parseFolderName(fileName){
	var fileNameParts = fileName.split('_');
	return fileNameParts[0] + '_' + fileNameParts[1] + '/';	
};

module.exports = Scraper;
